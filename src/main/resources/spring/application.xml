<?xml version="1.0" encoding="utf-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:apollo="http://www.ctrip.com/schema/apollo"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
                           http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
                           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
                           http://www.ctrip.com/schema/apollo http://www.ctrip.com/schema/apollo/apollo.xsd">

    <!-- 配置自动扫描 -->
    <context:component-scan base-package="com.wang.project.demo"/>

    <!-- 指定配置文件的位置 -->
<!--    <context:property-placeholder location="classpath:properties/application.properties"/>-->

    <!-- Apollo配置标签，然后需要配置连接Apollo服务的jvm参数：(注意：20880也可以是Apollo服务的端口号)
        -Dapp.id=wang-ssm-project
        -Dapollo.meta=http://localhost:20880
        -Dnev=FUNC
     -->
    <apollo:config namespaces="wang-ssm-project"/>

    <!-- 引入数据源、sqlSessionFactory、transactionManager -->
    <import resource="spring-datasource.xml"/>

    <!-- 引入redis配置 -->
    <import resource="spring-redis.xml"/>

    <!-- 引入spring封装的线程池 -->
    <import resource="threadPoolTaskExecutor.xml"/>

    <!-- 引入kafka生产者、消费者 -->
    <import resource="kafka-producer.xml"/>
    <import resource="kafka-consumer.xml"/>

    <!-- 引入rabbitMQ配置 -->
    <import resource="spring-rabbitmq.xml"/>

    <!-- 引入dubbo生产者、消费者 -->
    <import resource="dubbo-provider.xml"/>
    <import resource="dubbo-consumer.xml"/>

    <!-- 引入elastic job分布式定时任务 -->
    <import resource="elastic-job.xml"/>

</beans>