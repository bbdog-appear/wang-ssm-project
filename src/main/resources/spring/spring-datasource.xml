<?xml version="1.0" encoding="utf-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:sharding="http://shardingjdbc.io/schema/shardingjdbc/sharding"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
                           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
                           http://shardingjdbc.io/schema/shardingjdbc/sharding http://shardingjdbc.io/schema/shardingjdbc/sharding/sharding.xsd"
       default-lazy-init="true">

    <!-- 读取properties文件,配置多个properties配置文件 -->
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer" scope="prototype">
        <property name="location" value="classpath:properties/application.properties"/>
        <!-- 为了解决配置sharding-jdbc时占位符${0..9}与spring的Property占位符冲突 -->
        <property name="ignoreUnresolvablePlaceholders" value="true"/>
    </bean>

    <!-- dbcp Datasource -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${driver}" />
        <property name="url" value="${url}" />
        <property name="username" value="${username}" />
        <property name="password" value="${password}" />
        <!-- 初始化连接大小 -->
        <property name="initialSize" value="${initialSize}"/>
        <!-- 连接池最大数量 -->
        <property name="maxActive" value="${maxActive}"/>
        <!-- 连接池最大空闲 -->
        <property name="maxIdle" value="${maxIdle}"/>
        <!-- 连接池最小空闲 -->
        <property name="minIdle" value="${minIdle}"/>
        <!-- 获取连接最大等待时间 -->
        <property name="maxWait" value="${maxWait}"/>
        <!-- 设置数据库是否自动提交 true为自动提交事务 false为不提交事务 -->
        <property name="defaultAutoCommit" value="true"/>
    </bean>

<!--    &lt;!&ndash; Hikari DataSource &ndash;&gt;-->
<!--    <bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">-->
<!--        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>-->
<!--    </bean>-->

    <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="configLocation" value="classpath:mybatisConfig.xml"/>
        <!-- 自动扫描mapping.xml文件 -->
        <property name="mapperLocations" value="classpath:mapper/single/*Mapper.xml"/>
    </bean>

    <!-- 自动扫描和注册Mapper接口 basePackage是用来指定Mapper接口文件所在的基包， 在这个基包或其所有子包下面的Mapper接口都将被搜索到。
            多个基包之间可以使用逗号或者分号进行分隔 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 注意：配置多个数据源时，扫描mapper文件有一定讲究，因为扫描basePackage时，由于这里先加载，
              因此先扫了...mapper，包含了下面配置扫描sharding-jdbc的mapper.shardingjdbc。所以这里先对mapper文件
              做了映射，导致出了问题，报错：mybatis的BindingException：Invalid bound statement (not found)。
              解决方案：可以配置basePackage：...mapper.*Mapper或者再加个文件夹如：...mapper.noshardingjdbc-->
        <property name="basePackage" value="com.wang.project.demo.dao.mapper.single"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <!-- 配置事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <tx:annotation-driven proxy-target-class="true" transaction-manager="transactionManager"/>


    <!-- 配置sharding-jdbc -->
    <!-- StandardShardingStrategy只支持单分片键(一次计算出一个表)，提供PreciseShardingAlgorithm和RangeShardingAlgorithm两个分片算法 -->
    <sharding:standard-strategy id="wcProductTableShardingAlgorithm" sharding-column="SHARD_DATE"
                                precise-algorithm-class="com.wang.project.demo.dao.algorithm.WcProductTableShardingAlgorithm"
                                range-algorithm-class="com.wang.project.demo.dao.algorithm.WcProductTableShardingAlgorithm"/>
    <sharding:standard-strategy id="wcUserTableShardingAlgorithm" sharding-column="CONTRACT_NO"
                                precise-algorithm-class="com.wang.project.demo.dao.algorithm.WcUserTableShardingAlgorithm"/>
    <!-- sharding-jdbc数据源 -->
    <sharding:data-source id="shardingDataSource">
        <sharding:sharding-rule data-source-names="dataSource">
            <sharding:table-rules>
                <sharding:table-rule logic-table="wc_product" actual-data-nodes="dataSource.wc_product_"
                                     table-strategy-ref="wcProductTableShardingAlgorithm"/>
                <!-- 多张表[wc_user_0,wc_user_1,...,wc_user_9] -->
                <sharding:table-rule logic-table="wc_user" actual-data-nodes="dataSource.wc_user_${0..9}"
                                     table-strategy-ref="wcUserTableShardingAlgorithm"/>
            </sharding:table-rules>
        </sharding:sharding-rule>
        <sharding:props>
            <prop key="sql.show">true</prop>
        </sharding:props>
    </sharding:data-source>

    <!-- sharding-jdbc sqlSessionFactory -->
    <bean id="shardingSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="shardingDataSource"/>
        <property name="configLocation" value="classpath:mybatisConfig.xml"/>
        <!-- 自动扫描mapping.xml文件 -->
        <property name="mapperLocations" value="classpath:mapper/shardingjdbc/*Mapper.xml"/>
    </bean>
    <!-- sharding-jdbc 扫描注册mapper接口 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.wang.project.demo.dao.mapper.shardingjdbc"/>
        <property name="sqlSessionFactoryBeanName" value="shardingSqlSessionFactory"/>
    </bean>

    <!-- sharding-jdbc 配置事务管理器 -->
    <bean id="shardingTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="shardingDataSource"/>
    </bean>
    <tx:annotation-driven proxy-target-class="true" transaction-manager="shardingTransactionManager"/>

</beans>